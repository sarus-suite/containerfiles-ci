name: Release of CUDA-UCX-LibFabric container Multi-arch

on:
  push:
    paths:
      - 'hpc/communication/cuda-ucx-libfabric/Containerfile'

permissions:
  contents: write
  packages: write
  actions: read

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}
  REPO: ${{ github.repository }}


jobs:
  build:
    strategy:
      matrix:
        include:
          - arch: amd64
            runner: ubuntu-latest
          - arch: arm64
            runner: ubuntu-24.04-arm
    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        id: buildx

      - name: Log in to GHCR
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push single‑arch image
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.REPO }}/cuda-ucx-libfabric"
          docker buildx build \
            --builder "${{ steps.buildx.outputs.name }}" \
            --platform linux/${{ matrix.arch }} \
            --file hpc/communication/cuda-ucx-libfabric/Containerfile \
            --tag   "${IMAGE}:latest-${{ matrix.arch }}" \
            --push \
            .

# Multi-arch manifest that references both images
  manifest:
    name: Create multi‑arch manifest
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Log in to GHCR
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify single‑arch images exist
        run: |
          set -euo pipefail

          REPO="${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.REPO }}/cuda-ucx-libfabric}"
          IMAGES=(
            "${REPO}:latest-amd64"
            "${REPO}:latest-arm64"
          )

          for img in "${IMAGES[@]}"; do
            echo "Inspecting $img ..."
            if ! docker buildx imagetools inspect "$img" > /dev/null; then
              echo "::error file=manifest.yml::Image not found: $img"
              exit 1
            fi
          done

      - name: Create & push multi‑arch manifest
        run: |
          REPO="${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.REPO }}/cuda-ucx-libfabric}"
          docker buildx imagetools create \
            --tag "${REPO}:latest" \
            "${REPO}:latest-amd64" \
            "${REPO}:latest-arm64"

